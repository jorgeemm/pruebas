{
  "hash": "976849c569bf7265c23bdb8323b84969",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Operaciones básicas\"\n---\n\n```{=html}\n<style>\nbody {\ntext-align: justify}\n</style>\n```\n\n\n\n\n\n\n\n## 1. Operaciones numéricas\n\n-   Suma, resta, multiplicación, división, exponencial...\n-   Cuadrado (sqrt) y logaritmos (log)\n-   Absoluto:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nabs(-1.4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.4\n```\n\n\n:::\n:::\n\n\n\n-   Redondear:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nround(1.234, 2) #El segundo número indica el número de decimales al que se redondeará.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.23\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n## 2. Edición de caracteres (texto)\n\n-   Unión de caracteres:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npaste(\"Hola\", \"mundo\", sep = \" \")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hola mundo\"\n```\n\n\n:::\n\n```{.r .cell-code}\npaste0(\"Hola\", \"mundo\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Holamundo\"\n```\n\n\n:::\n:::\n\n\n\n-   Seleccionar una parte del texto:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsubstring(\"Nombre: Marga\", first = 7, last = 11)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \": Mar\"\n```\n\n\n:::\n:::\n\n\n\n-   Pasar un texto a minúsculas:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntolower(\"Hola, soy Marga\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"hola, soy marga\"\n```\n\n\n:::\n:::\n\n\n\n-   Pasar un texto mayúsculas:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntoupper(\"Hola, soy Marga\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"HOLA, SOY MARGA\"\n```\n\n\n:::\n:::\n\n\n\n-   Contar el número de caracteres (también espacios y símbolos, no solo letras):\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnchar(\"Hola, mundo!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n## 3. Operadores lógicos y relacionales\n\n**Operadores lógicos:**\n\n-   `!` NOT (lo opuesto)\n-   `&` AND\n-   `|` OR\n\n**Operadores relacionales:**\n\n-   `==` igual\n-   `!=` distinto\n-   `>` mayor que\n-   `>=` mayor o igual que\n-   `<=`menor o igual que\n-   `<` menor que\n\n## 4. Operaciones con vectores\n\nUn vector es una secuencia de elementos del mismo tipo (numérico, carácter, lógico, etc.). Se puede asimilar a una variable.\n\n-   Ver de qué tipo es el vector: `class()`\n-   Comprobar la longitud del vector: `length()`\n-   Si los vectores son númericos, se les pueden aplicar las mismas operaciones que a los números (suma, multuplicaicón...), ya sea a un único vector o entre vectores (sumar un vector a otro). Ej.:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvector1 <- c(1, 6, 4)\nvector2 <- c(1, 2, 3)\n\nvector1 + 10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11 16 14\n```\n\n\n:::\n\n```{.r .cell-code}\nvector1 + vector2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 8 7\n```\n\n\n:::\n:::\n\n\n\n-   Comparar dos vectores:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvector1 == vector2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE FALSE\n```\n\n\n:::\n:::\n\n\n\n-   Concatenar vectores: mismos comandos que para unir dos caracteres de texto. Ej.:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npaste(vector1, \":00\", sep=\"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1:00\" \"6:00\" \"4:00\"\n```\n\n\n:::\n\n```{.r .cell-code}\npaste(vector1, vector2, sep = \" & \")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1 & 1\" \"6 & 2\" \"4 & 3\"\n```\n\n\n:::\n:::\n\n\n\n-   Buscar si existe un valor concreto dentro de un vector. Ej.:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npartidos1 <- c(\"PP\", \"PSOE\", \"SUMAR\", \"VOX\")\npartidos2 <- c(\"PP\", \"PSOE\", \"OTROS\")\n\"VOX\" %in% partidos1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n\"VOX\" %in% partidos2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n-   Combinar vectores:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlong_vector <- c(partidos1, partidos2)\nlong_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"PP\"    \"PSOE\"  \"SUMAR\" \"VOX\"   \"PP\"    \"PSOE\"  \"OTROS\"\n```\n\n\n:::\n:::\n\n\n\n-   Conocer un elemento dentro de una posición concreta de un vector:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnum_vector <- 5:10\nnum_vector[3] # Elemento en la posición 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n\n```{.r .cell-code}\nnum_vector[c(2, 4)] # Elementos en las posiciones 2 y 4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6 8\n```\n\n\n:::\n:::\n\n\n\n-   Cambiar elementos específicos de un vector:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnum_vector[c(2, 4)] <- c(13, 50)\nnum_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  5 13  7 50  9 10\n```\n\n\n:::\n:::\n\n\n\n-   Explorar los primeros y últimos valores de un vector:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhead(long_vector, 2) # devuelve los dos primeros\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"PP\"   \"PSOE\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(long_vector, 3) # devuelve los tres primeros\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"PP\"    \"PSOE\"  \"OTROS\"\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}