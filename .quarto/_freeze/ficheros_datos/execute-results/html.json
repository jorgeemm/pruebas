{
  "hash": "f91f66cdc0ce3eb9a7d534fc8bda95b4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Ficheros de datos (dataframe)\"\n---\n\n```{=html}\n<style>\nbody {\ntext-align: justify}\n</style>\n```\n\n\n\n\n\n\n\n## Ficheros de datos (dataframes)\n\n### 1. Apertura de ficheros\n\nPara poder abrir un fichero no basta con el comando, sino que estos se deben guardar dentro de un nuevo objeto:\n\n``` r\ndatos<- read_csv(\"filename\")\n```\n\n<br>\n\n**Ficheros de texto plano (.csv, .txt, tsv, etc)** Se necisita abrir la librería readr: `library(readr)`. El comando a utilizar varía en función del separador del archivo:\n\n-   `read_csv()` para ficheros csv delimitados por coma (,).\n-   `read_csv2()` para ficheros csv delimitados por punto y coma (;).\n-   `read_tsv()` lee ficheros separados por tabulador\n-   `read_delim()` lee ficheros sin delimitador\n-   `read_fwf()` lee ficheros de ancho fijo\n-   `read_table()` lee ficheros separados por espacio\n\nSi las columnas tienen nombre, se debe especificar dentro de la función:\n\n``` r\ndata<-read_csv(\"filename\", col_names=FALSE)\n```\n\n<br>\n\n**Ficheros de excel** Cuando los datos están un fichero **.xlsx**, utilizamos función `read_excel()` del paquete **readxl**\n\nSi los datos están la primera hoja del fichero *mi_excel.xlsx*\n\n``` r\nlibrary(readxl)\ndatos <- read_excel(\"mi_excel.xlsx\", 1)\n```\n\nSi los datos están en una hoja llamada \"mi_hoja\"\n\n``` r\ndatos <- read.excel(\"mi_excel.xlsx\", sheetName = \"mi_hoja\") \n```\n\n<br>\n\n**Lectura de datos desde ficheros SPSS, Stata y SAS** Una de las opciones existentes es la función `haven()` del paquete **haven** nos permite abrir ficheros en formatoStata/SPSS/SAS. Por ejemplo:\n\n``` r\nlibrary(haven)\ndatos <- read_dta(\"filename.dta\")\n```\n\nLas funciones `read_spss()` y `read_sas()` tienen la misma sintaxis.\n\n<br>\n\n**Apertura manual de los ficheros**\n\nCuando los ficheros se abren así, lo mejor es copiar el comando que se ha empleado y copiarlo en un chunk del rmd o el script en el que se esté trabajadno, para que cuando se quiera volver a abrir el archivo sea más rapido hacerlo.\n\n------------------------------------------------------------------------\n\n### 2. Visualizar el contenido de un dataframe\n\n-   `View(datos)` → abre una nueva pestaña con la base de datos.\n-   `glimpse(datos)` (del paquete tydiverse) → muestra el número de filas y de columnas, el nombre de las variables, su clase y los primeros valores de cada una de ellas.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 29,201\nColumns: 10\n$ ESTUDIO  <dbl+lbl> 3411, 3411, 3411, 3411, 3411, 3411, 3411, 3411, 3411, 341…\n$ REGISTRO <dbl> 492777, 70655, 46423, 103464, 112810, 126567, 137692, 182178,…\n$ CUES     <dbl> 29043, 5848, 3893, 8711, 9517, 10736, 11573, 14839, 16793, 17…\n$ CCAA     <dbl+lbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ PROV     <dbl+lbl> 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, …\n$ MUN      <dbl+lbl>  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  …\n$ CAPITAL  <dbl+lbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, …\n$ TAMUNI   <dbl+lbl> 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, …\n$ ENTREV   <dbl+lbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ TIPO_TEL <dbl+lbl> 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, …\n```\n\n\n:::\n:::\n\n\n\n-   `dim(datos)` → permite conocer el número de filas y de columnas.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 29201   228\n```\n\n\n:::\n:::\n\n\n\n-   `summary(datos)` → muestra los descriptivos principales de cada una de las variables del dataframe (media y cuartiles).\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n    ESTUDIO        REGISTRO           CUES            CCAA       \n Min.   :3411   Min.   :   229   Min.   :    1   Min.   : 1.000  \n 1st Qu.:3411   1st Qu.: 86385   1st Qu.: 7301   1st Qu.: 4.000  \n Median :3411   Median :177688   Median :14601   Median : 9.000  \n Mean   :3411   Mean   :206694   Mean   :14601   Mean   : 8.062  \n 3rd Qu.:3411   3rd Qu.:307076   3rd Qu.:21901   3rd Qu.:12.000  \n Max.   :3411   Max.   :494973   Max.   :29201   Max.   :19.000  \n      PROV      \n Min.   : 1.00  \n 1st Qu.:11.00  \n Median :26.00  \n Mean   :24.67  \n 3rd Qu.:36.00  \n Max.   :52.00  \n```\n\n\n:::\n:::\n\n\n\n-   `colnames(datos)` → lista con el nombre de todas las variables.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"ESTUDIO\"  \"REGISTRO\" \"CUES\"     \"CCAA\"     \"PROV\"     \"MUN\"     \n [7] \"CAPITAL\"  \"TAMUNI\"   \"ENTREV\"   \"TIPO_TEL\" \"sexo\"     \"edad\"    \n[13] \"P0A\"      \"ECOPER\"   \"ECOESP\"  \n```\n\n\n:::\n:::\n\n\n\n-   `describe(datos)` (del paquete psych).\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n         vars     n      mean        sd median   trimmed       mad  min    max\nESTUDIO     1 29201   3411.00      0.00   3411   3411.00      0.00 3411   3411\nREGISTRO    2 29201 206693.59 142972.42 177688 196970.89 155275.66  229 494973\nCUES        3 29201  14601.00   8429.75  14601  14601.00  10822.98    1  29201\nCCAA        4 29201      8.06      4.66      9      7.98      4.45    1     19\nPROV        5 29201     24.67     14.30     26     24.43     17.79    1     52\nMUN         6 29201     37.74     66.98      0     20.88      0.00    0    297\nCAPITAL     7 29201      2.44      0.79      3      2.54      0.00    1      3\nTAMUNI      8 29201      3.78      1.64      4      3.75      1.48    1      7\nENTREV      9 29201      0.00      0.00      0      0.00      0.00    0      0\nTIPO_TEL   10 29201      1.74      0.44      2      1.80      0.00    1      2\n          range  skew kurtosis     se\nESTUDIO       0   NaN      NaN   0.00\nREGISTRO 494744  0.48    -0.89 836.67\nCUES      29200  0.00    -1.20  49.33\nCCAA         18 -0.10    -0.93   0.03\nPROV         51  0.10    -1.17   0.08\nMUN         297  2.30     4.96   0.39\nCAPITAL       2 -0.94    -0.77   0.00\nTAMUNI        6  0.15    -0.76   0.01\nENTREV        0   NaN      NaN   0.00\nTIPO_TEL      1 -1.08    -0.83   0.00\n```\n\n\n:::\n:::\n\n\n\n-   `str(datos)` → metadatos de cada una de las variables (lo que sale si le das al triángulo verde que aparece junto al nombre de la base de datos del environment).\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [29,201 × 5] (S3: tbl_df/tbl/data.frame)\n $ ESTUDIO : dbl+lbl [1:29201] 3411, 3411, 3411, 3411, 3411, 3411, 3411, 3411, 3411...\n   ..@ label        : chr \"Código del estudio\"\n   ..@ format.spss  : chr \"F4.0\"\n   ..@ display_width: int 4\n   ..@ labels       : Named num 3411\n   .. ..- attr(*, \"names\")= chr \"3411\"\n $ REGISTRO: num [1:29201] 492777 70655 46423 103464 112810 ...\n  ..- attr(*, \"label\")= chr \"Número de registro\"\n  ..- attr(*, \"format.spss\")= chr \"F6.0\"\n  ..- attr(*, \"display_width\")= int 6\n $ CUES    : num [1:29201] 29043 5848 3893 8711 9517 ...\n  ..- attr(*, \"label\")= chr \"Cuestionario\"\n  ..- attr(*, \"format.spss\")= chr \"F5.0\"\n  ..- attr(*, \"display_width\")= int 5\n $ CCAA    : dbl+lbl [1:29201] 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1...\n   ..@ label        : chr \"Comunidad autónoma\"\n   ..@ format.spss  : chr \"F2.0\"\n   ..@ display_width: int 2\n   ..@ labels       : Named num [1:19] 1 2 3 4 5 6 7 8 9 10 ...\n   .. ..- attr(*, \"names\")= chr [1:19] \"Andalucía\" \"Aragón\" \"Asturias (Principado de)\" \"Balears (Illes)\" ...\n $ PROV    : dbl+lbl [1:29201] 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4...\n   ..@ label        : chr \"Provincia\"\n   ..@ format.spss  : chr \"F2.0\"\n   ..@ display_width: int 2\n   ..@ labels       : Named num [1:52] 1 2 3 4 33 5 6 7 8 9 ...\n   .. ..- attr(*, \"names\")= chr [1:52] \"Araba/Álava\" \"Albacete\" \"Alicante/Alacant\" \"Almería\" ...\n - attr(*, \"label\")= chr \"fileNameJDS\"\n```\n\n\n:::\n:::\n\n\n\n-   `head(datos, 10)` → muestra las variables, su clase, los 10 primeros valores de cada uno de ellos.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 228\n   ESTUDIO     REGISTRO  CUES CCAA       PROV    MUN     CAPITAL TAMUNI  ENTREV \n   <dbl+lbl>      <dbl> <dbl> <dbl+lbl>  <dbl+l> <dbl+l> <dbl+l> <dbl+l> <dbl+l>\n 1 3411 [3411]   492777 29043 1 [Andalu… 4 [Alm… 0 [Mun… 3 [Otr… 1 [Men… 0 [Ano…\n 2 3411 [3411]    70655  5848 1 [Andalu… 4 [Alm… 0 [Mun… 3 [Otr… 1 [Men… 0 [Ano…\n 3 3411 [3411]    46423  3893 1 [Andalu… 4 [Alm… 0 [Mun… 3 [Otr… 3 [10.… 0 [Ano…\n 4 3411 [3411]   103464  8711 1 [Andalu… 4 [Alm… 0 [Mun… 3 [Otr… 3 [10.… 0 [Ano…\n 5 3411 [3411]   112810  9517 1 [Andalu… 4 [Alm… 0 [Mun… 3 [Otr… 3 [10.… 0 [Ano…\n 6 3411 [3411]   126567 10736 1 [Andalu… 4 [Alm… 0 [Mun… 3 [Otr… 3 [10.… 0 [Ano…\n 7 3411 [3411]   137692 11573 1 [Andalu… 4 [Alm… 0 [Mun… 3 [Otr… 3 [10.… 0 [Ano…\n 8 3411 [3411]   182178 14839 1 [Andalu… 4 [Alm… 0 [Mun… 3 [Otr… 3 [10.… 0 [Ano…\n 9 3411 [3411]   216764 16793 1 [Andalu… 4 [Alm… 0 [Mun… 3 [Otr… 3 [10.… 0 [Ano…\n10 3411 [3411]   237655 17918 1 [Andalu… 4 [Alm… 0 [Mun… 3 [Otr… 3 [10.… 0 [Ano…\n# ℹ 219 more variables: TIPO_TEL <dbl+lbl>, sexo <dbl+lbl>, edad <dbl+lbl>,\n#   P0A <dbl+lbl>, ECOPER <dbl+lbl>, ECOESP <dbl+lbl>, MEDIO_1 <dbl+lbl>,\n#   MEDIO_2 <dbl+lbl>, LEEPRENSA <dbl+lbl>, VETELE <dbl+lbl>,\n#   OYERADIO <dbl+lbl>, PRENSA <dbl+lbl>, P3AR <dbl+lbl>, TELEVISION <dbl+lbl>,\n#   P3BR <dbl+lbl>, RADIO <dbl+lbl>, P3CR <dbl+lbl>, GESTIONGOB <dbl+lbl>,\n#   GESTIONOPO <dbl+lbl>, PROBVOTO <dbl+lbl>, VOTOCORREO <dbl+lbl>,\n#   PROBPARTIDOS_1 <dbl+lbl>, PROBPARTIDOS_2 <dbl+lbl>, …\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n### 3. Modificar el fichero\n\n#### Filter: seleccionar casos (filas)\n\nSe usa el comando `filter`, del paquete dplyr (en tidyverse). Se establecen una serie de condiciones lógicas a partir de las cuales la función retendrá únicamente los casos (filas) que cumplen con dicha condición (*condiciones como ==, \\>, %in%*).\n\nEj.: en una base de datos donde los casos son municipios, seleccionar solo aquellos pertenecientes a Murcia o Almería:\n\n``` r\ndatos_2prov <- datos %>% \n  filter(Provincia==\"Almería\" | Provincia==\"Murcia\")\n  \ndatos_2prov <- datos %>% \n  filter(id_provincia %in% c(5,35))\n```\n\n*Al usar tanto este comando como el select, conviene guardar los cambios dentro de un nuevo objeto y dejar el dataset original sin modificar*\n\n<br>\n\n#### Select: seleccionar variables\n\nSe usa el comando `select`, del paquete dplyr. Esta función permite reducri el número de columnas, por lo que resulta de gran utilidad cuando tenemos datasets con muchas variables y solo vamos a trabajar con algunas de ellas.\n\nSeleccionar una columna: `select(datos, nombre_variable)`.\n\nEste comando permite seleccionar más de una variable a la vez: `select(datos, x1, x2, x3)`.\n\nTambiéns se pueden eliminar una o varias variables que no se quieran en el dataset: `select(datos, -variable)`\n\n<br>\n\n#### Ordenar las variables\n\n**Variable numérica:**\n\n-   Orden ascendente:\n    -   Opción 1: `datos %>% arrange(variable)`\n    -   Opción 2: `datos <- datos[order(datos$variable), ]`\n-   Orden descendente:\n    -   Opción 1: `datos %>% arrange(desc(variable))`\n    -   Opción 2: `datos <- datos[order(-datos$variable), ]`\n-   Se pueden ordenar los datos por dos variables simultáneamente:\n    -   Opción 1: `datos <- datos %>% arrange(var1, var1)`\n    -   Opción 2: `datos <- datos[order(datos$var1, datos$var2), ]`\n\n**Variable categórica:**\n\n-   Se usan los mismos comandos anteriores para ordenar por orden alfabético ascendente o descendente\n-   Orden personalizado: `mutate(variable = fct_relevel(variable, c(\"categoría1\", \"cat2\", \"catn\")))` Ej.:\n\n``` r\nmutate(partido = fct_relevel(party, c(\"PP\", \"PSOE\", \"VOX\", \"SUMAR\", \"Otros\")))\n```\n\n------------------------------------------------------------------------\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}