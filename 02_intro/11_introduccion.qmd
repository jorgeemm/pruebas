---
title: "R Studio"
---

```{=html}
<style>
body {
text-align: justify}
</style>
```

```{r setup, include=FALSE, message=FALSE, warning=FALSE}
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE,
                      fig.align = 'center', # Para que los gráficos de los comandos estén centrados en la página
                      out.width = '60%') # Para modificar el tamaño de los gráficos (en este caso hacerlos algo más pequeños)
```

```{r include=FALSE}
setwd("C:/Users/Lenovo/OneDrive/Escritorio/Apuntes_R")
library(tidyverse)
library(pacman)
source("00_datos/source.R")
```

## ¿Qué es R Studio?

<center>

![Ventanas de R Studio](01_img/ventanas_rstudio.png)

</center>

-   Editor de código: ficheros donde se escribe el código. Elemento clave para la reproducibilidad.
-   Consola: muestra los resultados del código ejecutado y permite ejecutar código de forma rápida (poco recomendable excepto para pruebas y mirar cosas muy concretas y rápidas)
-   Ventana de ambiente: muestra los objetos almacenados
-   Ventana de ficheros/gráficos…
    -   Permite visualizar resultados del trabajo: gráficos, html…
    -   Encontrar ficheros
    -   Ver detalles de los paquetes empleados, etc.

Existen diversos formatos para escribir código en R, siendo los más destacados los siguientes:

-   **Script**: útil si solo se quiere escribir código.
-   **RMarkdown**: más útil si se quieren añadir anotaciones de texto frecuentes. Además, cuenta con numerosas opciones extra, como añadir imágenes, tablas o guardar los documentos en formato pdf o html, entre otras funciones.
-   **Quarto**: muy similar a RMarkdown, pero más moderno y con más opciones.

## Instalar paquetes

Los paquetes son un conjunto de código, datos y documentación que permiten implementar funciones predefinidas extra.

**R básico**:

Para instalar un paquete, se puede hacer buscándola en la pestaña`Install` dentro de la pestaña `Packages` (esquina inferior derecha de la pantalla).

También se puede instalar usando el siguiente comando: `install.packages("nombre_librería")`

Una vez instalada, se abre usando el comando: `library("nombre_librería")`

IMPORTANTE: las librerías deben abrirse siempre que se usen (no con cada comando que se use, sino con cada sesión de R que se abra), pero solo se instalan una vez.

**Librería pacman**:

1.  Instalar la librería pacman.
2.  Abrir la librería.
3.  Cuando se vaya a abrir una nueva librería, en lugar de usar el comando `library(nombre_librería)` se usa `p_load(nombre_librería)`
    -   La ventaja de este comando es que, en caso de que no esté instalada la librería, se descargará y abrirá directamente.
    -   Además, con el comando p_load se pueden abrir en un único comando varias librerías, lo que reduce la cantidad de espacio necesario para abrir las librerías: `p_load(librería_1, librería_2, librería_3...)`

**Paquetes de GitHub**:

Tanto `install.packages` como `p_load` sirven únicamente para paquetes que estén dentro de CRAN. Para instalar los que estén en GitHub se debe usar el comando `devtools::install_github("libraría")`, que pertenece a la librería `devtools`.

## Recomendaciones

Al comenzar un nuevo trabajo en R, conviene crear un proyecto nuevo en el que se quiera trabajara, y mantener este ordenado. También es recomendable guardar todos los códigos de forma estructurada, de modo que tanto otras personas como tu yo del futuro puedan saber para qué sirven cada una de las cosas que se han añadido.

## Atajos

-   Añadir un **pipe** (%\>%): ctrl + shift + m
-   Añadir una almohadilla a la línea de código sobre la que se esté: ctrl + shift + c
-   Añadir la \<- con sus espacios: alt + -

**En RMarkdown / Quarto**

-   Añadir un nuevo chunk de R: ctrl + alt + i

**En un script**

-   Crear nuevas secciones dentro del documento: ctrl + shift + r

------------------------------------------------------------------------
